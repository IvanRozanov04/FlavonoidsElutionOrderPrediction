# RDKit
from rdkit import Chem
from rdkit.Chem import AllChem
from rdkit.Chem.Draw import rdMolDraw2D
# Visualization
from PIL import Image
import io

class KernelFPGenerator():
    """
    A utility class for generating graph-based molecular fingerprints relative to a specified core (MCS).

    This class manages canonical atom ordering, substructure matching, and fingerprint generation
    using custom parsing and encoding functions. It is particularly useful for machine learning tasks
    where molecules are decomposed into core and substituent structures.

    Attributes
    ----------
    mcs_smiles : str
        SMILES string of the Maximum Common Substructure (MCS) used as the molecular core.
    atom_order : list of int
        Canonical order of atoms in the MCS, used for reindexing molecules.
    generator : Callable
        A user-defined function that generates a fingerprint from a parsed graph.
    parser : Callable
        A user-defined function that parses a molecule and core into a graph-based structure
        suitable for fingerprinting.
    """
    def __init__(self,mcs_smiles='C1=CC=C(C=C1)C2=CC(=O)C3=CC=CC=C3O2',atom_order=[7,11,12,13,14,2,1,0,5,4,9,16,15,10,6,8,3]
                 ,generating_function=None,parsing_function=None):
        """
        Initializes the fingerprint generator with a core structure and utility functions.

        Parameters
        ----------
        mcs_smiles : str, optional
            SMILES string representing the molecular core (MCS), by default flavone.
        atom_order : list of int, optional
            Canonical atom order of the MCS used to reindex molecules (default corresponds to flavone).
        generating_function : Callable
            Function to generate a fingerprint given a parsed substituent graph.
        parsing_function : Callable
            Function to parse a molecule and MCS into a substituent graph.
        """
        self.mcs_smiles = mcs_smiles
        self.atom_order = atom_order
        self.generator = generating_function
        self.parser = parsing_function
    
    def display_mcs(self, size=(400, 300)):
        """
        Visualizes the MCS with atom indices overlaid for reference.

        Parameters
        ----------
        size : tuple of int, optional
            Image dimensions in pixels (width, height). Default is (400, 300).

        Returns
        -------
        PIL.Image.Image
            A PIL image displaying the MCS molecule with indexed atoms.
        """
        mol = self.reindex_to_mcs(Chem.MolFromSmiles(self.mcs_smiles))  # Clone to avoid modifying original
        AllChem.Compute2DCoords(mol)
        drawer = rdMolDraw2D.MolDraw2DCairo(size[0], size[1])
        opts = drawer.drawOptions()
        for atom in mol.GetAtoms():
            opts.atomLabels[atom.GetIdx()] = str(atom.GetIdx())

        drawer.DrawMolecule(mol)
        drawer.FinishDrawing()
        img_bytes = drawer.GetDrawingText()

        return Image.open(io.BytesIO(img_bytes))

    def reindex_to_mcs(self, mol):
        """
        Reorders the atoms in a molecule so that the MCS atoms appear first in a canonical order,
        followed by substituents.

        Parameters
        ----------
        mol : rdkit.Chem.Mol
            The input molecule to be reindexed.

        Returns
        -------
        rdkit.Chem.Mol
            A new molecule with reordered atoms.

        Raises
        ------
        ValueError
            If the MCS is not found as a substructure in the input molecule.
        """
        # Convert MCS SMILES to a molecule object
        mcs_mol = Chem.MolFromSmiles(self.mcs_smiles)

        # Attempt to find a substructure match to the MCS
        match = mol.GetSubstructMatch(mcs_mol)
        if not match:
            raise ValueError("MCS not found in the input molecule.")

        # Identify all atoms not part of the MCS match
        subs = [i for i in range(mol.GetNumAtoms()) if i not in match]

        # Reorder the matched MCS indices according to a predefined canonical order
        new_match = [match[i] for i in self.atom_order]

        # Concatenate reordered MCS atoms with sorted substituents
        new_order = list(new_match) + subs

        # Apply the new atom order to create a reordered molecule
        mol_reordered = Chem.RenumberAtoms(mol, new_order)

        return mol_reordered
    def generate(self,mol_smiles):
        """
        Generates a fingerprint for a molecule based on its substituent graph
        relative to the core (MCS).

        Parameters
        ----------
        mol_smiles : str
            SMILES string of the input molecule to process.

        Returns
        -------
        np.ndarray
            The fingerprint generated by the user-defined `generator` function.

        Raises
        ------
        ValueError
            If the MCS is not found in the input molecule.
        """
        mcs_mol = self.reindex_to_mcs(Chem.MolFromSmiles(self.mcs_smiles))
        mol = self.reindex_to_mcs((Chem.MolFromSmiles(mol_smiles)))
        parsed_graph = self.parser(mol,mcs_mol)
        fp = self.generator(parsed_graph)
        return fp 